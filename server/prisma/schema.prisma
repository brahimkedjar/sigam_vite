generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}
model AuditLog {
    id             Int      @id @default(autoincrement())
    action         String
    entityType     String
    entityId       Int?
    userId         Int?
    user           User?    @relation(fields: [userId], references: [id])
    timestamp      DateTime @default(now())
    changes        Json?
    ipAddress      String?
    userAgent      String?
    status         String?  @default("SUCCESS")
    errorMessage   String?
    additionalData Json?
    previousState  Json? // Stores the complete previous state for undo
    contextId      String? // For grouping related actions
    sessionId      String? // For tracking user sessions

    @@index([entityType])
    @@index([entityId])
    @@index([userId])
    @@index([timestamp])
    @@index([contextId])
    @@index([sessionId])
}
model Session {
    id        Int      @id @default(autoincrement())
    token     String   @unique @db.VarChar(64)
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@index([token])
    @@index([userId])
    @@index([expiresAt])
}
model User {
  id         Int         @id @default(autoincrement())
  nom        String
  Prenom     String
  username   String      @unique
  email      String      @unique
  password   String
  roleId     Int?
  role       Role?       @relation(fields: [roleId], references: [id])
  userGroups UserGroup[]
  sessions   Session[]
  createdAt  DateTime    @default(now())
  AuditLog   AuditLog[]

  // Relations to messages
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")

  // Relations to conversations
  conversationsAsUser1 Conversation[] @relation("ConversationUser1")
  conversationsAsUser2 Conversation[] @relation("ConversationUser2")
}

model Role {
    id              Int              @id @default(autoincrement())
    name            String           @unique
    users           User[]
    rolePermissions RolePermission[]
}

model Group {
    id               Int               @id @default(autoincrement())
    name             String            @unique
    description      String?
    userGroups       UserGroup[]
    groupPermissions GroupPermission[]
}

model UserGroup {
    userId    Int
    groupId   Int
    user      User     @relation(fields: [userId], references: [id])
    group     Group    @relation(fields: [groupId], references: [id])
    createdAt DateTime @default(now())

    @@id([userId, groupId])
}

model Permission {
    id               Int               @id @default(autoincrement())
    name             String            @unique
    rolePermissions  RolePermission[]
    groupPermissions GroupPermission[]
}

model RolePermission {
    roleId       Int
    permissionId Int
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@id([roleId, permissionId])
}

model GroupPermission {
    groupId      Int
    permissionId Int
    group        Group      @relation(fields: [groupId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@id([groupId, permissionId])
}

model Antenne {
    id_antenne   Int       @id @default(autoincrement())
    nom          String
    localisation String?
    wilayas      Wilaya[]
    
}

model Wilaya {
    id_wilaya    Int                @id @default(autoincrement())
    id_antenne   Int
    code_wilaya  String            @unique
    nom_wilayaFR String
    nom_wilayaAR String
    zone         String
    antenne      Antenne           @relation(fields: [id_antenne], references: [id_antenne])
    daira        Daira[]
    Interaction  InteractionWali[]
    Demande      Demande[]
}

model Daira {
    id_daira    Int        @id @default(autoincrement())
    id_wilaya   Int
    nom_dairaFR String
    nom_dairaAR String
    wilaya      Wilaya    @relation(fields: [id_wilaya], references: [id_wilaya])
    communes    Commune[]

    Demande Demande[]
}

model Commune {
    id_commune    Int        @id @default(autoincrement())
    id_daira      Int?
    nom_communeFR String
    nom_communeAR String
    nature        String?
    daira         Daira?     @relation(fields: [id_daira], references: [id_daira])
    Demande       Demande[]
    Permis       Permis[]
    
}

model DossierAdministratif {
    id_dossier       Int               @id @default(autoincrement())
    id_typeproc      Int
    id_typePermis    Int
    nombre_doc       Int
    remarques        String?
    typePermis       TypePermis        @relation(fields: [id_typePermis], references: [id])
    typeProcedure    TypeProcedure     @relation(fields: [id_typeproc], references: [id])
    dossierDocuments DossierDocument[]

    @@unique([id_typePermis, id_typeproc])
}

model Document {
    id_doc                  Int                      @id @default(autoincrement())
    nom_doc                 String
    description             String
    format                  String
    taille_doc              String
    dossierDocuments        DossierDocument[]
    dossierFournisDocuments DossierFournisDocument[]
}

model DossierDocument {
    id_dossier Int
    id_doc     Int
    is_obligatoire  Boolean       @default(false)
    missing_action  MissingAction @default(BLOCK_NEXT)
    reject_message  String?

    document Document             @relation(fields: [id_doc], references: [id_doc])
    dossier  DossierAdministratif @relation(fields: [id_dossier], references: [id_dossier])

    @@id([id_dossier, id_doc])
}

model DossierFournis {
    id_dossierFournis Int      @id @default(autoincrement())
    id_demande        Int
    date_depot        DateTime @default(now())
    recevabilite_doss   Boolean?
    statut_dossier    String // e.g., 'complet', 'incomplet', 'en_revision'
    remarques         String?
    numero_accuse           String?
    date_accuse             DateTime?
    numero_recepisse        String?
    date_recepisse          DateTime?
    mise_en_demeure_envoyee Boolean       @default(false)
    date_mise_en_demeure    DateTime?
    pieces_manquantes       Json?
    verification_phase      String?
    date_preannotation      DateTime?

    demande   Demande                  @relation(fields: [id_demande], references: [id_demande])
    documents DossierFournisDocument[]

    @@map("dossier_fournis")
}

// ============================
// Portal (Public Applications)
// ============================

model PortalPermitType {
  id           Int                  @id @default(autoincrement())
  code         String               @unique
  label        String
  description  String?
  regime       String?
  initialYears Int?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  docs         PortalTypeDocument[]
  applications PortalApplication[]
}

model PortalDocumentDefinition {
  id            Int                       @id @default(autoincrement())
  code          String                    @unique
  name          String
  description   String?
  format        String?
  maxSizeMB     Int?
  required      Boolean                   @default(true)
  missingAction MissingAction             @default(BLOCK_NEXT)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  typeLinks     PortalTypeDocument[]
  appDocs       PortalApplicationDocument[]
}

model PortalTypeDocument {
  id           Int                     @id @default(autoincrement())
  permitTypeId Int
  documentId   Int
  order        Int?
  notes        String?
  permitType   PortalPermitType        @relation(fields: [permitTypeId], references: [id])
  document     PortalDocumentDefinition @relation(fields: [documentId], references: [id])

  @@unique([permitTypeId, documentId])
}

model PortalCompany {
  id              Int                @id @default(autoincrement())
  legalName       String
  legalForm       String?
  rcNumber        String?
  rcDate          DateTime?
  nif             String?
  nis             String?
  capital         Float?
  address         String?
  email           String?
  phone           String?
  website         String?
  managerName     String?
  registryFileUrl String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  reps            PortalRepresentative[]
  shareholders    PortalShareholder[]
  applications    PortalApplication[]
}

model PortalRepresentative {
  id          Int          @id @default(autoincrement())
  companyId   Int
  fullName    String
  function    String?
  nationalId  String?
  email       String?
  phone       String?
  powerDocUrl String?
  company     PortalCompany @relation(fields: [companyId], references: [id])
}

model PortalShareholder {
  id          Int          @id @default(autoincrement())
  companyId   Int
  name        String
  type        String
  nif         String?
  sharePct    Float
  nationality String?
  company     PortalCompany @relation(fields: [companyId], references: [id])
}

model PortalApplication {
  id            Int                     @id @default(autoincrement())
  code          String?                 @unique
  status        String
  title         String?
  permitTypeId  Int
  companyId     Int?
  wilaya        String?
  daira         String?
  commune       String?
  lieuDit       String?
  polygonGeo    Json?
  applicantToken String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  permitType    PortalPermitType        @relation(fields: [permitTypeId], references: [id])
  company       PortalCompany?          @relation(fields: [companyId], references: [id])
  documents     PortalApplicationDocument[]
  payments      PortalPayment[]
}

model PortalApplicationDocument {
  id            Int                     @id @default(autoincrement())
  applicationId Int
  documentId    Int
  status        String
  fileUrl       String?
  uploadedAt    DateTime?               @default(now())
  application   PortalApplication       @relation(fields: [applicationId], references: [id])
  document      PortalDocumentDefinition @relation(fields: [documentId], references: [id])

  @@unique([applicationId, documentId])
}

model PortalPayment {
  id            Int               @id @default(autoincrement())
  applicationId Int
  provider      String
  amount        Int
  currency      String            @default("DZD")
  status        String
  intentId      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  application   PortalApplication @relation(fields: [applicationId], references: [id])
}

model DossierFournisDocument {
    id_dossierFournis Int
    id_doc            Int
    status            String // 'present' | 'manquant'
    file_url          String? // optional
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    dossierFournis DossierFournis @relation(fields: [id_dossierFournis], references: [id_dossierFournis])
    document       Document       @relation(fields: [id_doc], references: [id_doc])

    @@id([id_dossierFournis, id_doc])
    @@map("dossier_fournis_document")
}

model StatutPermis {
    id          Int      @id @default(autoincrement())
    lib_statut  String   @unique //Actif - suspendu - annule - rennonce - expire - renouvelle
    description String
    Permis      Permis[]
}
// enum EnumStatutPermis {
// En_vigueur
// Expire
// Renouvelle
// Modifie
// Transfere
// Proroge
// Fusionne
// Annule
// Converti
// Retire
// Rennonce
// Restitue
// suspendu
// }

model TypePermis {
    id                   Int                    @id @default(autoincrement())
    id_taxe              Int
    lib_type             String                 @unique //Permis de prospection / Permis d'exploration ...
    code_type            String                 @unique // ppm / PEM / PXC ...
    regime               String // mines / carriere
    duree_initiale       Float // in years
    nbr_renouv_max       Int
    duree_renouv         Float // max renewal times
    delai_renouv         Int // days before expiration
    superficie_max       Float?
    permis               Permis[]
    DossierAdministratif DossierAdministratif[]
    Demande              Demande[]
    taxe                 SuperficiaireBareme    @relation(fields: [id_taxe], references: [id])
    Barems               BaremProduitetDroit[]
    PermisTemplate     PermisTemplate[]
    @@map("typepermis")
}
model PermisTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  elements    Json
  typePermisId Int 
  permisId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  permis      Permis?   @relation(fields: [permisId], references: [id])
  typePermis  TypePermis @relation(fields: [typePermisId], references: [id])
  @@index([typePermisId])
  @@index([permisId])
  @@map("permis_templates")
}


model TypeProcedure {
  id          Int          @id @default(autoincrement())
  libelle     String?      // demande / extension / renouvellement / modification / fusion ...
  description String?
  phases      Phase[]      // Each type has its own phases
  
  DossierAdministratif DossierAdministratif[]
  Bareme               BaremProduitetDroit[]
  Demande              Demande[]
  
  @@map("typeprocedure")
}
model Permis {
    id                       Int       @id @default(autoincrement())
    id_typePermis            Int
    id_commune               Int?
    id_detenteur             Int?
    id_statut                Int?
    code_permis              String?   
    date_adjudication        DateTime?
    date_octroi              DateTime?
    date_expiration          DateTime?
    //   date_renouvellement    DateTime?
    date_annulation          DateTime?
    date_renonciation        DateTime?
    duree_validite           Int // in years
    lieu_ditFR               String?
    lieu_ditAR               String?
    mode_attribution         String?
    superficie               Float?
    utilisation              String?
    invest_prevu             String?
    invest_real              String?
    montant_offre            String?
    statut_juridique_terrain String?
    duree_prevue_travaux     String?
    date_demarrage_travaux   DateTime?
    statut_activites         String?
    nombre_renouvellements   Int
    hypothec                 String?
    nom_projet               String?
    volume_prevu             String?
    date_conversion_permis   DateTime?
    commentaires             String?

    // Relations
    typePermis         TypePermis           @relation(fields: [id_typePermis], references: [id])
    commune            Commune?             @relation(fields: [id_commune], references: [id_commune])
    detenteur          DetenteurMorale?     @relation(fields: [id_detenteur], references: [id_detenteur])
    statut             StatutPermis?        @relation(fields: [id_statut], references: [id])
    procedures         Procedure[]          @relation("PermisProcedure")
    RapportActivite    RapportActivite[]
    CahierCharge       CahierCharge[]
    ObligationFiscale  ObligationFiscale[]
    demFusion          demFusion?
    fusionPermisSource fusionPermisSource[]
    codeAssimilation codeAssimilation[]
    PermisTemplate     PermisTemplate[]
    @@map("permis") 
}

model codeAssimilation {
    id_code  Int  @id @default(autoincrement())
    id_ancienType Int
    id_permis  Int
    ancien_code  String

    ancienType  AncienTypePermis       @relation(fields: [id_ancienType], references: [id_ancienType])
    permis  Permis       @relation(fields: [id_permis], references: [id])


}

model AncienTypePermis {
    id_ancienType Int  @id @default(autoincrement())
    lib_type String
    code_type  String
    codeAssimilation codeAssimilation[]

}

enum MissingAction {
  BLOCK_NEXT
  REJECT
  WARNING
}

enum StatutProcedure {
    EN_COURS 
    TERMINEE 
    EN_ATTENTE 
}

enum StatutDemande {
    ACCEPTEE
    EN_COURS
    REJETEE
}

model EtapeProc {
  id_etape    Int      @id @default(autoincrement())
  lib_etape   String
  duree_etape Int?     // en jours
  ordre_etape Int      // ordre a l'interieur d'une phase
  id_phase    Int

  phase Phase @relation(fields: [id_phase], references: [id_phase])
  procedureEtapes ProcedureEtape[] // status of etapes in procedures

  @@map("etape_proc")
}

model Phase {
  id_phase        Int             @id @default(autoincrement())
  libelle         String
  ordre           Int             // ordre global des phases
  description     String?
  dureeEstimee    Int?            // en jours
  typeProcedureId Int?            // Link to procedure type
  
  typeProcedure TypeProcedure?    @relation(fields: [typeProcedureId], references: [id])
  etapes        EtapeProc[]
  procedurePhases ProcedurePhase[]
  
  @@map("phase")
}


model ProcedurePhase {
  id_proc   Int
  id_phase  Int
  ordre     Int               // order of phase within this procedure
  statut    StatutProcedure?  // Add this field

  procedure Procedure @relation(fields: [id_proc], references: [id_proc])
  phase     Phase     @relation(fields: [id_phase], references: [id_phase])

  @@id([id_proc, id_phase])
  @@map("procedure_phase")
}
model ProcedureEtape {
  id_proc    Int
  id_etape   Int
  statut     StatutProcedure // "en cours", "terminee", etc.
  date_debut DateTime
  date_fin   DateTime?
  link       String?

  procedure Procedure @relation(fields: [id_proc], references: [id_proc])
  etape      EtapeProc @relation(fields: [id_etape], references: [id_etape])

  @@id([id_proc, id_etape])
  @@map("procedure_etape")
}

model Procedure {
    id_proc         Int             @id @default(autoincrement())
    id_seance       Int?
    num_proc        String          @unique
    date_debut_proc DateTime
    date_fin_proc   DateTime?
    statut_proc     StatutProcedure
    resultat        String?
    observations    String?

    permis                   Permis[]                   @relation("PermisProcedure")
    demandes                 Demande[]
    coordonnees              ProcedureCoord[]
    SubstanceAssocieeDemande SubstanceAssocieeDemande[]
    InteractionWali          InteractionWali[]
    ProcedureEtape           ProcedureEtape[]           // status of etapes
    ProcedurePhase           ProcedurePhase[] 
    seance                   SeanceCDPrevue?            @relation("SeanceProcedures", fields: [id_seance], references: [id_seance])
    //TypeProcedure            TypeProcedure?             @relation(fields: [typeProcedureId], references: [id])
    typeProcedureId          Int?
    inscriptionProvisoire    InscriptionProvisoire?
    @@map("procedure")
}

model Demande {
    id_demande               Int            @id @default(autoincrement()) 
    id_proc                  Int?
    id_detenteur             Int?
    id_pays                  Int?
    id_wilaya                Int?
    id_daira                 Int?
    id_commune               Int?
    id_typeProc              Int?
    id_typePermis            Int?
    id_expert                Int?
    code_demande             String?         @unique
    date_demande             DateTime?      // @default(now())
    date_instruction         DateTime?
    intitule_projet          String?
    date_fin_instruction     DateTime?
    date_refus               DateTime?
    lieu_ditFR               String?
    lieu_dit_ar              String?
    superficie               Float?
    statut_juridique_terrain String?
    occupant_terrain_legal   String?
    destination              String?
    locPointOrigine          String?
    duree_travaux_estimee    String?
    date_demarrage_prevue    DateTime?
    // nom_pre_signataire       String?
    qualite_signataire       String?
    montant_produit          String?
    con_res_geo              String?
    con_res_exp              String?
    volume_prevu             String?
    capital_social_disponible             Float?
    budget_prevu             Float?
description_travaux String?
sources_financement  String?
    remarques                String?
    date_fin_ramassage         DateTime?
    num_enregist             String?
    AreaCat                  Float?                           

    statut_demande           String     //StatutDemande?

    wilaya          Wilaya?                  @relation(fields: [id_wilaya], references: [id_wilaya])
    daira           Daira?                   @relation(fields: [id_daira], references: [id_daira])
    commune         Commune?                 @relation(fields: [id_commune], references: [id_commune])
    procedure       Procedure?                @relation(fields: [id_proc], references: [id_proc])
    detenteur       DetenteurMorale?         @relation(fields: [id_detenteur], references: [id_detenteur])
    expertMinier    ExpertMinier?            @relation(fields: [id_expert], references: [id_expert])
    typePermis      TypePermis?               @relation(fields: [id_typePermis], references: [id])
    typeProcedure   TypeProcedure?            @relation(fields: [id_typeProc], references: [id])
    pays            Pays?                     @relation(fields: [id_pays], references: [id_pays])
    dossiersFournis DossierFournis[]
    renouvellement  ProcedureRenouvellement?
    demFermeture    demFermeture?
    demAnnulation   demAnnulation?
    Substitution    demSubstitution?
    modification    demModification?
    cession         demCession?
    renonciation    demRenonciation?
    fusion          demFusion?
    transfert       demTransfert?
    verificationGeo demandeVerificationGeo?
    obs             demandeObs?
    min             demandeMin?
    CahierCharge    CahierCharge[]
    inscriptionProvisoire InscriptionProvisoire?

    @@map("demande")
}

model ProcedureRenouvellement {
    id_renouvellement   Int       @id @default(autoincrement())
    id_demande          Int       @unique
    num_decision        String?
    date_decision       DateTime?
    date_debut_validite DateTime?
    date_fin_validite   DateTime?
    commentaire         String?
    demande             Demande   @relation(fields: [id_demande], references: [id_demande])
}

model demFermeture {
    id_fermeture Int       @id @default(autoincrement())
    id_demande   Int       @unique
    num_decision String?
    date_constat DateTime?
    rapport      String?
    demande      Demande   @relation(fields: [id_demande], references: [id_demande])
}

model demAnnulation {
    id_annulation     Int       @id @default(autoincrement())
    id_demande        Int       @unique
    num_decision      String?
    date_constat      DateTime?
    date_annulation   DateTime?
    cause_annulation  String?
    statut_annulation String?
    demande           Demande   @relation(fields: [id_demande], references: [id_demande])
}

model demSubstitution {
    id_substitution    Int       @id @default(autoincrement())
    id_demande         Int       @unique
    num_decision       String?
    date_decision      DateTime?
    motif_substitution String?
    commentaires       String?
    demande            Demande   @relation(fields: [id_demande], references: [id_demande])
}

model demModification {
    id_modification     Int     @id @default(autoincrement())
    id_demande          Int     @unique
    type_modif          String?
    statut_modification String?
    demande             Demande @relation(fields: [id_demande], references: [id_demande])
}

model demCession {
    id_cession             Int              @id @default(autoincrement())
    id_demande             Int              @unique
    id_ancienCessionnaire  Int
    id_nouveauCessionnaire Int
    motif_cession          String?
    nature_cession         String? //partiel, complet
    taux_cession           Float?
    date_validation        DateTime?
    //   statut_cession             String?   
    demande                Demande          @relation(fields: [id_demande], references: [id_demande])
    ancienCessionnaire     PersonnePhysique @relation("AncienCessionnaire", fields: [id_ancienCessionnaire], references: [id_personne])
    NouveauCessionnaire    PersonnePhysique @relation("NouveauCessionnaire", fields: [id_nouveauCessionnaire], references: [id_personne])
}

model demRenonciation {
    id_renonciation    Int     @id @default(autoincrement())
    id_demande         Int     @unique
    motif_renonciation String?
    rapport_technique  String?
    demande            Demande @relation(fields: [id_demande], references: [id_demande])
}

model demFusion {
    id_fusion          Int                  @id @default(autoincrement())
    id_demande         Int                  @unique
    id_permisResultant Int                  @unique
    date_fusion        DateTime
    motif_fusion       String?
    statut_fusion      String?
    demande            Demande              @relation(fields: [id_demande], references: [id_demande])
    permis             Permis               @relation(fields: [id_permisResultant], references: [id])
    fusionPermisSource fusionPermisSource[]
}

model fusionPermisSource {
    id_permis Int
    id_fusion Int

    permis    Permis    @relation(fields: [id_permis], references: [id])
    demFusion demFusion @relation(fields: [id_fusion], references: [id_fusion])

    @@id([id_permis, id_fusion])
}

model demTransfert {
  id_transfert     Int       @id @default(autoincrement())
  id_demande       Int       @unique
  motif_transfert  String?
  observations     String?
  date_transfert   DateTime  @default(now())

  // Relations
  demande            Demande              @relation(fields: [id_demande], references: [id_demande])
  transfertDetenteur TransfertDetenteur[]
}
model TransfertDetenteur {
  id                   Int              @id @default(autoincrement())
  id_transfert         Int
  id_detenteur         Int?             // Le detenteur concerne (ancien ou nouveau)
  type_detenteur       EnumTypeDetenteur  // ANCIEN ou NOUVEAU
  role                 String?          // "CEDANT / AMODIANT" ou "CESSIONNAIRE / AMODIATAIRE"
  date_enregistrement  DateTime?

  // Relations
  transfert demTransfert   @relation(fields: [id_transfert], references: [id_transfert])
  detenteur DetenteurMorale? @relation(fields: [id_detenteur], references: [id_detenteur])

  @@map("transfert_detenteur")
}

enum EnumTypeDetenteur {
  ANCIEN
  NOUVEAU
}


model demandeVerificationGeo {
    id_demVerif                Int       @id @default(autoincrement())
    id_demande                 Int       @unique
    sit_geo_ok                 Boolean?
    empiet_ok                  Boolean?
    superf_ok                  Boolean?
    geom_ok                    Boolean?
    verification_cadastrale_ok Boolean?
    superficie_cadastrale      Float?

    demande Demande @relation(fields: [id_demande], references: [id_demande])
}

model demandeObs {
    id_demandeObs     Int     @id @default(autoincrement())
    id_demande        Int     @unique
    obs_situation_geo String?
    obs_empietement   String?
    obs_emplacement   String?
    obs_geom          String?
    obs_superficie    String?

    demande Demande @relation(fields: [id_demande], references: [id_demande])
}

model demandeMin {
    id_demMin     Int     @id @default(autoincrement())
    id_demande    Int     @unique
    min_label     String?
    min_teneur    Float?
    ordre_mineral String?

    demande Demande @relation(fields: [id_demande], references: [id_demande])
}

model ExpertMinier {
    id_expert      Int      @id @default(autoincrement())
    nom_expert     String
    num_agrement   String?
    date_agrement  DateTime?
    etat_agrement  String?
    adresse        String?
    email          String?
    tel_expert     String?
    fax_expert     String?
    specialisation String?

    demandes Demande[] //  One-to-many inverse side

    @@map("expertminier")
    Notification Notification[]
}

model StatutJuridique {
    id_statutJuridique Int               @id @default(autoincrement())
    code_statut        String            @unique
    statut_fr          String
    statut_ar          String
    detenteurs         DetenteurMorale[]

    @@map("statutjuridique")
}

model DetenteurMorale {
    id_detenteur       Int                     @id @default(autoincrement())
    id_statutJuridique Int?
    id_pays            Int?
    nom_societeFR      String?
    nom_societeAR      String?
    adresse_siege     String?
    telephone          String?
    fax                String?
    email              String?
    site_web           String?
    statutJuridique    StatutJuridique?         @relation(fields: [id_statutJuridique], references: [id_statutJuridique])
    pays               Pays?                    @relation(fields: [id_pays], references: [id_pays])
    fonctions          FonctionPersonneMoral[]
    demande            Demande[]
    registreCommerce   RegistreCommerce[]
    Permis             Permis[]
    transfertDetenteur TransfertDetenteur[]

    @@map("detenteurmorale")
}

model Pays {
    id_pays     Int    @id @default(autoincrement())
    code_pays   String  @unique
    nom_pays    String
    nationalite String

    demande          Demande[]
    detenteur        DetenteurMorale[]
    personnePhysique PersonnePhysique[]

    @@map("pays")
}

model RegistreCommerce {
    id                  Int      @id @default(autoincrement()) 
    id_detenteur        Int?
    numero_rc           String?
    date_enregistrement DateTime?
    capital_social      Float?
    nis                 String?
    nif                 String?
    adresse_legale      String?

    detenteur DetenteurMorale? @relation(fields: [id_detenteur], references: [id_detenteur])

    @@map("registrecommerce")
}

model PersonnePhysique {
    id_personne          Int      @id @default(autoincrement())
    id_pays              Int
    nomFR                String
    nomAR                String
    prenomFR             String
    prenomAR             String
    date_naissance       DateTime?
    lieu_naissance       String
    nationalite         String
    adresse_domicile     String
    telephone            String
    fax                  String
    email                String
    qualification        String
    num_carte_identite  String   @unique
    lieu_juridique_soc   String
    ref_professionnelles String

    pays            Pays                    @relation(fields: [id_pays], references: [id_pays])
    fonctions       FonctionPersonneMoral[]
    cessionsAncien  demCession[]            @relation("AncienCessionnaire")
    cessionsNouveau demCession[]            @relation("NouveauCessionnaire")

    @@map("personnephysique")
}
enum EnumTypeFonction {
    Representant
    Actionnaire
    Representant_Actionnaire
}
model FonctionPersonneMoral {
    id_detenteur       Int
    id_personne        Int
    type_fonction      EnumTypeFonction
    statut_personne    String
    taux_participation Float

    detenteur DetenteurMorale  @relation(fields: [id_detenteur], references: [id_detenteur])
    personne  PersonnePhysique @relation(fields: [id_personne], references: [id_personne])

    @@id([id_detenteur, id_personne])
    @@map("fonctionpersonnemoral")
}

enum EnumTypeInteraction {
    envoi
    relance
    reponse
}

enum EnumAvisWali {
    favorable
    defavorable
}

model InteractionWali {
    id_interaction   Int                 @id @default(autoincrement())
    id_procedure     Int
    id_wilaya        Int
    type_interaction EnumTypeInteraction?
    avis_wali        EnumAvisWali? 
    date_envoi DateTime?
    date_reponse DateTime?
    delai_depasse   Boolean?
    nom_responsable_reception  String?
    commentaires        String?
    contenu          String?
    is_relance Boolean @default(false) // to distinguish relances

    Procedure Procedure @relation(fields: [id_procedure], references: [id_proc])
    Wilaya    Wilaya    @relation(fields: [id_wilaya], references: [id_wilaya])
}

model Substance {
    id_sub           Int                        @id @default(autoincrement())
    nom_subFR        String
    nom_subAR        String
    categorie_sub    String
    famille_sub      String
    id_redevance     Int
    redevance        RedevanceBareme            @relation(fields: [id_redevance], references: [id_redevance])
    associeesDemande SubstanceAssocieeDemande[]

    @@map("substances")
}

model SubstanceAssocieeDemande {
    id_assoc     Int          @id @default(autoincrement())
    id_proc      Int
    id_substance Int
    priorite     Enumpriorite
    date_ajout   DateTime     @default(now())

    procedure Procedure @relation(fields: [id_proc], references: [id_proc])
    substance Substance @relation(fields: [id_substance], references: [id_sub])

    @@unique([id_proc, id_substance])
    @@map("substance_associee_demande")
}

enum Enumpriorite {
    principale
    secondaire
}

model RedevanceBareme {
    id_redevance     Int         @id @default(autoincrement())
    taux_redevance   Float
    valeur_marchande Float
    unite            String
    devise           String
    description      String
    substances       Substance[]

    @@map("redevance_bareme")
}

model SeanceCDPrevue {
    id_seance     Int               @id @default(autoincrement())
    num_seance    String
    date_seance   DateTime
    exercice      Int
    remarques     String?
    statut        EnumStatutSeance
    procedures    Procedure[]       @relation("SeanceProcedures")
    membres       MembresComite[]   @relation("SeanceMembres")
    comites       ComiteDirection[] @relation("SeanceComites")
    seancesMembre MembreSeance[]
}

enum EnumStatutSeance {
    programmee
    terminee
}

model ComiteDirection {
    id_comite       Int      @id @default(autoincrement())
    id_seance       Int
    date_comite     DateTime
    resume_reunion  String
    fiche_technique String?
    carte_projettee String?
    rapport_police  String?

    decisionCDs DecisionCD[]
    seance      SeanceCDPrevue @relation(fields: [id_seance], references: [id_seance], name: "SeanceComites")
}

model DecisionCD {
    id_decision     Int                @id @default(autoincrement())
    id_comite       Int
    numero_decision String
    duree_decision  Int?
    commentaires    String?
    decision_cd     EnumDecisionComite

    comite ComiteDirection @relation(fields: [id_comite], references: [id_comite])
}

model MembresComite {
    id_membre       Int    @id @default(autoincrement())
    nom_membre      String
    prenom_membre   String
    fonction_membre String
    email_membre    String

    seances      SeanceCDPrevue[] @relation("SeanceMembres")
    membreSeance MembreSeance[]
}

model MembreSeance {
    id_seance Int
    id_membre Int

    seance SeanceCDPrevue @relation(fields: [id_seance], references: [id_seance])
    membre MembresComite  @relation(fields: [id_membre], references: [id_membre])

    @@id([id_seance, id_membre])
}

enum EnumDecisionComite {
    favorable
    defavorable
    autre
}

enum StatutCoord {
    DEMANDE_INITIALE
    NOUVEAU
    ANCIENNE
}

model ProcedureCoord {
    id_procedureCoord Int         @id @default(autoincrement())
    id_proc           Int
    id_coordonnees    Int
    statut_coord      StatutCoord

    procedure  Procedure  @relation(fields: [id_proc], references: [id_proc])
    coordonnee Coordonnee @relation(fields: [id_coordonnees], references: [id_coordonnees])

    @@unique([id_proc, id_coordonnees])
}

model Coordonnee {
  id_coordonnees    Int              @id @default(autoincrement())
  id_zone_interdite Int?
  point             String?
  x                 Float
  y                 Float
  z                 Float
  system            String?          @default("WGS84") // New field
  zone              Int?                             // New field
  hemisphere        String?                          // New field
  procedureLinks    ProcedureCoord[]
  
  @@map("coordonnee")
}

// Provisional inscription for coordinates provided at Step 4
model InscriptionProvisoire {
  id                   Int        @id @default(autoincrement())
  id_proc              Int        @unique
  id_demande           Int        @unique
  points               Json
  system               String?
  zone                 Int?
  hemisphere           String?
  superficie_declaree  Float?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  procedure            Procedure  @relation(fields: [id_proc], references: [id_proc])
  demande              Demande    @relation(fields: [id_demande], references: [id_demande])

  @@map("inscription_provisoire")
}

model CahierCharge {
    id                        Int       @id @default(autoincrement())
    permisId                  Int?
    demandeId                 Int?
    num_cdc                   String
    date_etablissement        DateTime
    dateExercice              DateTime
    lieu_signature            String
    signataire_administration String
    fuseau                    String?
    typeCoordonnees           String?
    version                   String?
    natureJuridique           String?
    vocationTerrain           String?
    nomGerant                 String?
    personneChargeTrxx        String?
    qualification             String?
    reservesGeologiques       Float?
    reservesExploitables      Float?
    volumeExtraction          Float?
    dureeExploitation         Int?
    methodeExploitation       String?
    dureeTravaux              Int?
    dateDebutTravaux          DateTime?
    dateDebutProduction       DateTime?
    investissementDA          Float?
    investissementUSD         Float?
    capaciteInstallee         Float?
    commentaires              String?
    createdAt                 DateTime  @default(now())
    updatedAt                 DateTime  @updatedAt
    permis                    Permis?   @relation(fields: [permisId], references: [id])
    demande                   Demande?  @relation(fields: [demandeId], references: [id_demande])

    @@map("cahiercharge")
}

model TypePaiement {
    id             Int                 @id @default(autoincrement())
    libelle        String              @unique
    frequence      String // Annuel, Unique, etc.
    details_calcul String?
    obligations    ObligationFiscale[]

    @@map("typepaiement")
}

model ObligationFiscale {
    id              Int                @id @default(autoincrement())
    id_typePaiement Int
    id_permis       Int
    annee_fiscale   Int
    montant_attendu Float
    date_echeance   DateTime
    statut          EnumStatutPaiement
    details_calcul  String?

    permis       Permis       @relation(fields: [id_permis], references: [id])
    typePaiement TypePaiement @relation(fields: [id_typePaiement], references: [id])
    paiements    Paiement[]
    tsPaiements TsPaiement[]

    @@map("obligationfiscale")
}

enum EnumStatutPaiement {
    A_payer
    Paye
    En_retard
    Annule
    Partiellement_paye
}

model Paiement {
    id               Int       @id @default(autoincrement())
    id_obligation    Int
    montant_paye     Float
    devise           String    @default("DZD")
    date_paiement    DateTime
    mode_paiement    String // "Virement", "Cheque", "Especes"
    num_quittance    String?
    etat_paiement    String // "Valide", "En attente", "Rejete"
    justificatif_url String?
    num_perc         String?
    date_remisOp     DateTime?
    created_at       DateTime  @default(now())
    updated_at       DateTime  @updatedAt

    obligation              ObligationFiscale @relation(fields: [id_obligation], references: [id])

    @@map("paiement")
}

model TsPaiement {
    id_tsPaiement Int      @id @default(autoincrement())
    id_obligation Int
    datePerDebut  DateTime
    datePerFin    DateTime
    surfaceMin    Float
    surfaceMax    Float

  obligation ObligationFiscale @relation(fields: [id_obligation], references: [id])
}

model BaremProduitetDroit {
    id                  Int   @id @default(autoincrement())
    montant_droit_etab  Float
    produit_attribution Float

    typePermisId Int
    typePermis   TypePermis @relation(fields: [typePermisId], references: [id])

    typeProcedureId Int
    typeProcedure   TypeProcedure @relation(fields: [typeProcedureId], references: [id])

    @@map("barem_produit_droit")
}

model SuperficiaireBareme {
    id               Int          @id @default(autoincrement())
    droit_fixe       Float
    periode_initiale Float
    premier_renouv   Float
    autre_renouv     Float
    devise           String
    typePermis       TypePermis[]

    @@map("superficiaire_bareme")
}

model RapportActivite {
    id_rapport               Int       @id @default(autoincrement())
    id_permis                Int
    permis                   Permis    @relation(fields: [id_permis], references: [id])
    date_remise_reelle       DateTime
    etat_activite            String
    leve_topo_3112           String?
    leve_topo_3006           String?
    plan_exploitation        String?
    date_debut_travaux       DateTime?
    vente_exportation        String?
    importation              String?
    valeur_equipement_acquis Float?
    pros_expl_entamee        String?
    avancee_travaux          String?
    travaux_realises         String?
    nbr_ouvrages             Int?
    volume                   Float?
    resume_activites         String?
    investissements_realises Float?
    qte_explosifs            Float?
    qte_explosifs_DIM        Float?
    detonateurs              Int?
    dmr                      Int?
    cordeau_detonant         Int?
    meche_lente              Int?
    relais                   Int?
    DEI                      Int?
    effectif_cadre           Int?
    effectif_maitrise        Int?
    effectif_execution       Int?
    production_toutvenant    Float?
    production_marchande     Float?
    production_vendue        Float?
    production_stocke        Float?
    stock_T_V                Float?
    stock_produit_marchand   Float?
    production_sable         Float?
    poussieres               Float?
    rejets_laverie           Float?
    fumee_gaz                Float?
    autres_effluents         Float?
    nbr_accidents            Int?
    accidents_mortels        Int?
    accidents_non_mortels    Int?
    nbrs_jours_perdues       Int?
    taux_frequence           Float?
    taux_gravite             Float?
    nbrs_incidents           Int?
    nbrs_malades_pro         Int?
    remise_etat_realisee     String?
    cout_remise_etat         Float?
    commentaires_generaux    String?
    rapport_url              String?

    @@map("rapport_activite")
}

model Notification {
  id               Int      @id @default(autoincrement())
  type             String
  title            String
  message          String
  isRead           Boolean  @default(false)
  relatedEntityId  Int?
  relatedEntityType String?
  expertId         Int?
  expert           ExpertMinier?  @relation(fields: [expertId], references: [id_expert])
  createdAt        DateTime @default(now())
  priority         String   @default("info")
  @@map("notifications")
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String   @db.Text

  senderId      Int
  receiverId    Int
  conversationId Int?

  sender        User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation  Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
  @@index([createdAt])
}


model Conversation {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("ConversationUser1", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User     @relation("ConversationUser2", fields: [user2Id], references: [id])
  user2Id   Int
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}
